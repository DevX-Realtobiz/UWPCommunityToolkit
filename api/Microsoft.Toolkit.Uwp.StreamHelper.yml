### YamlMime:ManagedReference
items:
- uid: Microsoft.Toolkit.Uwp.StreamHelper
  commentId: T:Microsoft.Toolkit.Uwp.StreamHelper
  id: StreamHelper
  parent: Microsoft.Toolkit.Uwp
  children:
  - Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)
  - Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)
  - Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId,System.String,Windows.Storage.FileAccessMode)
  - Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  - Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  - Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  - Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)
  - Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId,System.String)
  - Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync(System.String)
  - Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync(System.String)
  - Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync(System.String)
  - Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: StreamHelper
  nameWithType: StreamHelper
  fullName: Microsoft.Toolkit.Uwp.StreamHelper
  type: Class
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: StreamHelper
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 27
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nThis class provides static helper methods for streams.\n"
  example: []
  syntax:
    content: public static class StreamHelper
    content.vb: Public Module StreamHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)
  id: GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetHttpStreamAsync(Uri, CancellationToken)
  nameWithType: StreamHelper.GetHttpStreamAsync(Uri, CancellationToken)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetHttpStreamAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 35
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nGet the response stream returned by a HTTP get request.\n"
  example: []
  syntax:
    content: public static Task<IRandomAccessStream> GetHttpStreamAsync(this Uri uri, CancellationToken cancellationToken = null)
    parameters:
    - id: uri
      type: System.Uri
      description: Uri to request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: instance of <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
      description: Response stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetHttpStreamAsync(uri As Uri, cancellationToken As CancellationToken = Nothing) As Task(Of IRandomAccessStream)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)
  id: GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)
  isExtensionMethod: true
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetHttpStreamToStorageFileAsync(Uri, StorageFile)
  nameWithType: StreamHelper.GetHttpStreamToStorageFileAsync(Uri, StorageFile)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri, Windows.Storage.StorageFile)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetHttpStreamToStorageFileAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 61
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nGet the response stream returned by a HTTP get request and save it to a local file.\n"
  example: []
  syntax:
    content: public static Task GetHttpStreamToStorageFileAsync(this Uri uri, StorageFile targetFile)
    parameters:
    - id: uri
      type: System.Uri
      description: Uri to request.
    - id: targetFile
      type: Windows.Storage.StorageFile
      description: StorageFile to save the stream to.
    return:
      type: System.Threading.Tasks.Task
      description: True if success.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetHttpStreamToStorageFileAsync(uri As Uri, targetFile As StorageFile) As Task
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  id: GetPackagedFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetPackagedFileStreamAsync(String, FileAccessMode)
  nameWithType: StreamHelper.GetPackagedFileStreamAsync(String, FileAccessMode)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync(System.String, Windows.Storage.FileAccessMode)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetPackagedFileStreamAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 86
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nReturn a stream to a specified file from the installation folder.\n"
  example: []
  syntax:
    content: public static Task<IRandomAccessStream> GetPackagedFileStreamAsync(string fileName, FileAccessMode accessMode = FileAccessMode.Read)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    - id: accessMode
      type: Windows.Storage.FileAccessMode
      description: File access mode. Default is read.
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
      description: File stream
    content.vb: Public Shared Function GetPackagedFileStreamAsync(fileName As String, accessMode As FileAccessMode = FileAccessMode.Read) As Task(Of IRandomAccessStream)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  id: GetLocalFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetLocalFileStreamAsync(String, FileAccessMode)
  nameWithType: StreamHelper.GetLocalFileStreamAsync(String, FileAccessMode)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync(System.String, Windows.Storage.FileAccessMode)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetLocalFileStreamAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 100
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nReturn a stream to a specified file from the application local folder.\n"
  example: []
  syntax:
    content: public static Task<IRandomAccessStream> GetLocalFileStreamAsync(string fileName, FileAccessMode accessMode = FileAccessMode.Read)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    - id: accessMode
      type: Windows.Storage.FileAccessMode
      description: File access mode. Default is read.
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
      description: File stream
    content.vb: Public Shared Function GetLocalFileStreamAsync(fileName As String, accessMode As FileAccessMode = FileAccessMode.Read) As Task(Of IRandomAccessStream)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  id: GetLocalCacheFileStreamAsync(System.String,Windows.Storage.FileAccessMode)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetLocalCacheFileStreamAsync(String, FileAccessMode)
  nameWithType: StreamHelper.GetLocalCacheFileStreamAsync(String, FileAccessMode)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync(System.String, Windows.Storage.FileAccessMode)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetLocalCacheFileStreamAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 114
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nReturn a stream to a specified file from the application local cache folder.\n"
  example: []
  syntax:
    content: public static Task<IRandomAccessStream> GetLocalCacheFileStreamAsync(string fileName, FileAccessMode accessMode = FileAccessMode.Read)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    - id: accessMode
      type: Windows.Storage.FileAccessMode
      description: File access mode. Default is read.
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
      description: File stream
    content.vb: Public Shared Function GetLocalCacheFileStreamAsync(fileName As String, accessMode As FileAccessMode = FileAccessMode.Read) As Task(Of IRandomAccessStream)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId,System.String,Windows.Storage.FileAccessMode)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId,System.String,Windows.Storage.FileAccessMode)
  id: GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId,System.String,Windows.Storage.FileAccessMode)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: GetKnowFoldersFileStreamAsync(KnownFolderId, String, FileAccessMode)
  nameWithType: StreamHelper.GetKnowFoldersFileStreamAsync(KnownFolderId, String, FileAccessMode)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId, System.String, Windows.Storage.FileAccessMode)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetKnowFoldersFileStreamAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 129
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nReturn a stream to a specified file from the application local cache folder.\n"
  example: []
  syntax:
    content: public static Task<IRandomAccessStream> GetKnowFoldersFileStreamAsync(KnownFolderId knownFolderId, string fileName, FileAccessMode accessMode = FileAccessMode.Read)
    parameters:
    - id: knownFolderId
      type: Windows.Storage.KnownFolderId
      description: The well known folder ID to use
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    - id: accessMode
      type: Windows.Storage.FileAccessMode
      description: File access mode. Default is read.
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
      description: File stream
    content.vb: Public Shared Function GetKnowFoldersFileStreamAsync(knownFolderId As KnownFolderId, fileName As String, accessMode As FileAccessMode = FileAccessMode.Read) As Task(Of IRandomAccessStream)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync(System.String)
  id: IsPackagedFileExistsAsync(System.String)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: IsPackagedFileExistsAsync(String)
  nameWithType: StreamHelper.IsPackagedFileExistsAsync(String)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsPackagedFileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 143
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nTest if a file exists in the application installation folder.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use StorageFileHelper.FileExistsAsync instead.")]

      public static Task<bool> IsPackagedFileExistsAsync(string fileName)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if file exists.
    content.vb: >-
      <Obsolete("Use StorageFileHelper.FileExistsAsync instead.")>

      Public Shared Function IsPackagedFileExistsAsync(fileName As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StorageFileHelper.FileExistsAsync instead.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync(System.String)
  id: IsLocalFileExistsAsync(System.String)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: IsLocalFileExistsAsync(String)
  nameWithType: StreamHelper.IsLocalFileExistsAsync(String)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsLocalFileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 155
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nTest if a file exists in the application local folder.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use StorageFileHelper.FileExistsAsync instead.")]

      public static Task<bool> IsLocalFileExistsAsync(string fileName)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if file exists.
    content.vb: >-
      <Obsolete("Use StorageFileHelper.FileExistsAsync instead.")>

      Public Shared Function IsLocalFileExistsAsync(fileName As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StorageFileHelper.FileExistsAsync instead.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync(System.String)
  id: IsLocalCacheFileExistsAsync(System.String)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: IsLocalCacheFileExistsAsync(String)
  nameWithType: StreamHelper.IsLocalCacheFileExistsAsync(String)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsLocalCacheFileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 167
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nTest if a file exists in the application local cache folder.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use StorageFileHelper.FileExistsAsync instead.")]

      public static Task<bool> IsLocalCacheFileExistsAsync(string fileName)
    parameters:
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if file exists.
    content.vb: >-
      <Obsolete("Use StorageFileHelper.FileExistsAsync instead.")>

      Public Shared Function IsLocalCacheFileExistsAsync(fileName As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StorageFileHelper.FileExistsAsync instead.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId,System.String)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId,System.String)
  id: IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId,System.String)
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: IsKnownFolderFileExistsAsync(KnownFolderId, String)
  nameWithType: StreamHelper.IsKnownFolderFileExistsAsync(KnownFolderId, String)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsKnownFolderFileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 180
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nTest if a file exists in the application local cache folder.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use StorageFileHelper.FileExistsAsync instead.")]

      public static Task<bool> IsKnownFolderFileExistsAsync(KnownFolderId knownFolderId, string fileName)
    parameters:
    - id: knownFolderId
      type: Windows.Storage.KnownFolderId
      description: The well known folder ID to use
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if file exists.
    content.vb: >-
      <Obsolete("Use StorageFileHelper.FileExistsAsync instead.")>

      Public Shared Function IsKnownFolderFileExistsAsync(knownFolderId As KnownFolderId, fileName As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StorageFileHelper.FileExistsAsync instead.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)
  id: IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)
  isExtensionMethod: true
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: IsFileExistsAsync(StorageFolder, String)
  nameWithType: StreamHelper.IsFileExistsAsync(StorageFolder, String)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsFileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 195
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nTest if a file exists in the application local folder.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use StorageFileHelper.FileExistsAsync instead.")]

      public static Task<bool> IsFileExistsAsync(this StorageFolder workingFolder, string fileName)
    parameters:
    - id: workingFolder
      type: Windows.Storage.StorageFolder
      description: Folder to use.
    - id: fileName
      type: System.String
      description: Relative name of the file to open. Can contains subfolders.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if file exists.
    content.vb: >-
      <Obsolete("Use StorageFileHelper.FileExistsAsync instead.")>

      <ExtensionAttribute>

      Public Shared Function IsFileExistsAsync(workingFolder As StorageFolder, fileName As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StorageFileHelper.FileExistsAsync instead.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)
  commentId: M:Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)
  id: ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Toolkit.Uwp.StreamHelper
  langs:
  - csharp
  - vb
  name: ReadTextAsync(IRandomAccessStream, Encoding)
  nameWithType: StreamHelper.ReadTextAsync(IRandomAccessStream, Encoding)
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: ReadTextAsync
    path: Microsoft.Toolkit.Uwp/Helpers/StreamHelper.cs
    startLine: 214
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRead stream content as a string.\n"
  example: []
  syntax:
    content: public static Task<string> ReadTextAsync(this IRandomAccessStream stream, Encoding encoding = null)
    parameters:
    - id: stream
      type: Windows.Storage.Streams.IRandomAccessStream
      description: Stream to read from.
    - id: encoding
      type: System.Text.Encoding
      description: Encoding to use. Can be set to null (ASCII will be used in this case).
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Stream content.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadTextAsync(stream As IRandomAccessStream, encoding As Encoding = Nothing) As Task(Of String)
  overload: Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Toolkit.Uwp
  commentId: N:Microsoft.Toolkit.Uwp
  isExternal: false
  name: Microsoft.Toolkit.Uwp
  nameWithType: Microsoft.Toolkit.Uwp
  fullName: Microsoft.Toolkit.Uwp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync
  isExternal: false
  name: GetHttpStreamAsync
  nameWithType: StreamHelper.GetHttpStreamAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
  commentId: T:System.Threading.Tasks.Task{Windows.Storage.Streams.IRandomAccessStream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IRandomAccessStream>
  nameWithType: Task<IRandomAccessStream>
  fullName: System.Threading.Tasks.Task<Windows.Storage.Streams.IRandomAccessStream>
  nameWithType.vb: Task(Of IRandomAccessStream)
  fullName.vb: System.Threading.Tasks.Task(Of Windows.Storage.Streams.IRandomAccessStream)
  name.vb: Task(Of IRandomAccessStream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Windows.Storage.Streams.IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: Windows.Storage.Streams.IRandomAccessStream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Windows.Storage.Streams.IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: Windows.Storage.Streams.IRandomAccessStream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync
  isExternal: false
  name: GetHttpStreamToStorageFileAsync
  nameWithType: StreamHelper.GetHttpStreamToStorageFileAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetHttpStreamToStorageFileAsync
- uid: Windows.Storage.StorageFile
  commentId: T:Windows.Storage.StorageFile
  parent: Windows.Storage
  isExternal: true
  name: StorageFile
  nameWithType: StorageFile
  fullName: Windows.Storage.StorageFile
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Windows.Storage
  commentId: N:Windows.Storage
  isExternal: false
  name: Windows.Storage
  nameWithType: Windows.Storage
  fullName: Windows.Storage
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync
  isExternal: false
  name: GetPackagedFileStreamAsync
  nameWithType: StreamHelper.GetPackagedFileStreamAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetPackagedFileStreamAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Windows.Storage.FileAccessMode
  commentId: T:Windows.Storage.FileAccessMode
  parent: Windows.Storage
  isExternal: true
  name: FileAccessMode
  nameWithType: FileAccessMode
  fullName: Windows.Storage.FileAccessMode
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync
  isExternal: false
  name: GetLocalFileStreamAsync
  nameWithType: StreamHelper.GetLocalFileStreamAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalFileStreamAsync
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync
  isExternal: false
  name: GetLocalCacheFileStreamAsync
  nameWithType: StreamHelper.GetLocalCacheFileStreamAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetLocalCacheFileStreamAsync
- uid: Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync
  isExternal: false
  name: GetKnowFoldersFileStreamAsync
  nameWithType: StreamHelper.GetKnowFoldersFileStreamAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.GetKnowFoldersFileStreamAsync
- uid: Windows.Storage.KnownFolderId
  commentId: T:Windows.Storage.KnownFolderId
  parent: Windows.Storage
  isExternal: true
  name: KnownFolderId
  nameWithType: KnownFolderId
  fullName: Windows.Storage.KnownFolderId
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync
  isExternal: false
  name: IsPackagedFileExistsAsync
  nameWithType: StreamHelper.IsPackagedFileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsPackagedFileExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync
  isExternal: false
  name: IsLocalFileExistsAsync
  nameWithType: StreamHelper.IsLocalFileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalFileExistsAsync
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync
  isExternal: false
  name: IsLocalCacheFileExistsAsync
  nameWithType: StreamHelper.IsLocalCacheFileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsLocalCacheFileExistsAsync
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync
  isExternal: false
  name: IsKnownFolderFileExistsAsync
  nameWithType: StreamHelper.IsKnownFolderFileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsKnownFolderFileExistsAsync
- uid: Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync
  isExternal: false
  name: IsFileExistsAsync
  nameWithType: StreamHelper.IsFileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.IsFileExistsAsync
- uid: Windows.Storage.StorageFolder
  commentId: T:Windows.Storage.StorageFolder
  parent: Windows.Storage
  isExternal: true
  name: StorageFolder
  nameWithType: StorageFolder
  fullName: Windows.Storage.StorageFolder
- uid: Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync
  isExternal: false
  name: ReadTextAsync
  nameWithType: StreamHelper.ReadTextAsync
  fullName: Microsoft.Toolkit.Uwp.StreamHelper.ReadTextAsync
- uid: Windows.Storage.Streams.IRandomAccessStream
  commentId: T:Windows.Storage.Streams.IRandomAccessStream
  parent: Windows.Storage.Streams
  isExternal: true
  name: IRandomAccessStream
  nameWithType: IRandomAccessStream
  fullName: Windows.Storage.Streams.IRandomAccessStream
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Windows.Storage.Streams
  commentId: N:Windows.Storage.Streams
  isExternal: false
  name: Windows.Storage.Streams
  nameWithType: Windows.Storage.Streams
  fullName: Windows.Storage.Streams
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
