### YamlMime:ManagedReference
items:
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  commentId: T:Microsoft.Toolkit.Uwp.IObjectStorageHelper
  id: IObjectStorageHelper
  parent: Microsoft.Toolkit.Uwp
  children:
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync(System.String)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String,System.String)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,``0)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,System.String,``0)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync``1(System.String,``0)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,``0)
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})
  - Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
  langs:
  - csharp
  - vb
  name: IObjectStorageHelper
  nameWithType: IObjectStorageHelper
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  type: Interface
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IObjectStorageHelper
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 21
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nService used to store data\n"
  example: []
  syntax:
    content: public interface IObjectStorageHelper
    content.vb: Public Interface IObjectStorageHelper
  extensionMethods:
  - System.Object.Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String)
  id: KeyExists(System.String)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: KeyExists(String)
  nameWithType: IObjectStorageHelper.KeyExists(String)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: KeyExists
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 28
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nDetect if a setting already exists\n"
  example: []
  syntax:
    content: bool KeyExists(string key)
    parameters:
    - id: key
      type: System.String
      description: Key of the setting (that contains object)
    return:
      type: System.Boolean
      description: True if a value exists
    content.vb: Function KeyExists(key As String) As Boolean
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists*
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String,System.String)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String,System.String)
  id: KeyExists(System.String,System.String)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: KeyExists(String, String)
  nameWithType: IObjectStorageHelper.KeyExists(String, String)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: KeyExists
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 36
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nDetect if a setting already exists in composite.\n"
  example: []
  syntax:
    content: bool KeyExists(string compositeKey, string key)
    parameters:
    - id: compositeKey
      type: System.String
      description: Key of the composite (that contains settings)
    - id: key
      type: System.String
      description: Key of the setting (that contains object)
    return:
      type: System.Boolean
      description: True if a value exists
    content.vb: Function KeyExists(compositeKey As String, key As String) As Boolean
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists*
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,``0)
  id: Read``1(System.String,``0)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: Read<T>(String, T)
  nameWithType: IObjectStorageHelper.Read<T>(String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Read
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 45
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRetrieve single item by its key\n"
  example: []
  syntax:
    content: T Read<T>(string key, T default = null)
    parameters:
    - id: key
      type: System.String
      description: Key of the object
    - id: default
      type: '{T}'
      description: Default value of the object
    typeParameters:
    - id: T
      description: Type of object retrieved
    return:
      type: '{T}'
      description: The T object
    content.vb: Function Read(Of T)(key As String, default As T = Nothing) As T
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read*
  nameWithType.vb: IObjectStorageHelper.Read(Of T)(String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read(Of T)(System.String, T)
  name.vb: Read(Of T)(String, T)
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read``1(System.String,System.String,``0)
  id: Read``1(System.String,System.String,``0)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: Read<T>(String, String, T)
  nameWithType: IObjectStorageHelper.Read<T>(String, String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read<T>(System.String, System.String, T)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Read
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 55
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRetrieve single item by its key in composite.\n"
  example: []
  syntax:
    content: T Read<T>(string compositeKey, string key, T default = null)
    parameters:
    - id: compositeKey
      type: System.String
      description: Key of the composite (that contains settings)
    - id: key
      type: System.String
      description: Key of the object
    - id: default
      type: '{T}'
      description: Default value of the object
    typeParameters:
    - id: T
      description: Type of object retrieved
    return:
      type: '{T}'
      description: The T object
    content.vb: Function Read(Of T)(compositeKey As String, key As String, default As T = Nothing) As T
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read*
  nameWithType.vb: IObjectStorageHelper.Read(Of T)(String, String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read(Of T)(System.String, System.String, T)
  name.vb: Read(Of T)(String, String, T)
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,``0)
  id: Save``1(System.String,``0)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: Save<T>(String, T)
  nameWithType: IObjectStorageHelper.Save<T>(String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Save
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 63
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nSave single item by its key\n"
  example: []
  syntax:
    content: void Save<T>(string key, T value)
    parameters:
    - id: key
      type: System.String
      description: Key of the value saved
    - id: value
      type: '{T}'
      description: Object to save
    typeParameters:
    - id: T
      description: Type of object saved
    content.vb: Sub Save(Of T)(key As String, value As T)
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save*
  nameWithType.vb: IObjectStorageHelper.Save(Of T)(String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save(Of T)(System.String, T)
  name.vb: Save(Of T)(String, T)
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})
  id: Save``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: Save<T>(String, IDictionary<String, T>)
  nameWithType: IObjectStorageHelper.Save<T>(String, IDictionary<String, T>)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save<T>(System.String, System.Collections.Generic.IDictionary<System.String, T>)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Save
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 74
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nSave a group of items by its key in a composite.\nThis method should be considered for objects that do not exceed 8k bytes during the lifetime of the application\n(refers to <xref href=\"Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync%60%601(System.String%2c%60%600)\" data-throw-if-not-resolved=\"false\"></xref> for complex/large objects) and for groups of settings which\nneed to be treated in an atomic way.\n"
  example: []
  syntax:
    content: void Save<T>(string compositeKey, IDictionary<string, T> values)
    parameters:
    - id: compositeKey
      type: System.String
      description: Key of the composite (that contains settings)
    - id: values
      type: System.Collections.Generic.IDictionary{System.String,{T}}
      description: Objects to save
    typeParameters:
    - id: T
      description: Type of object saved
    content.vb: Sub Save(Of T)(compositeKey As String, values As IDictionary(Of String, T))
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save*
  nameWithType.vb: IObjectStorageHelper.Save(Of T)(String, IDictionary(Of String, T))
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save(Of T)(System.String, System.Collections.Generic.IDictionary(Of System.String, T))
  name.vb: Save(Of T)(String, IDictionary(Of String, T))
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync(System.String)
  id: FileExistsAsync(System.String)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: FileExistsAsync(String)
  nameWithType: IObjectStorageHelper.FileExistsAsync(String)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: FileExistsAsync
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 81
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nDetect if a file already exists\n"
  example: []
  syntax:
    content: Task<bool> FileExistsAsync(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: Key of the file (that contains object)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if a value exists
    content.vb: Function FileExistsAsync(filePath As String) As Task(Of Boolean)
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync*
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync``1(System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync``1(System.String,``0)
  id: ReadFileAsync``1(System.String,``0)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: ReadFileAsync<T>(String, T)
  nameWithType: IObjectStorageHelper.ReadFileAsync<T>(String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: ReadFileAsync
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 90
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRetrieve object from file\n"
  example: []
  syntax:
    content: Task<T> ReadFileAsync<T>(string filePath, T default = null)
    parameters:
    - id: filePath
      type: System.String
      description: Path to the file that contains the object
    - id: default
      type: '{T}'
      description: Default value of the object
    typeParameters:
    - id: T
      description: Type of object retrieved
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Waiting task until completion with the object in the file
    content.vb: Function ReadFileAsync(Of T)(filePath As String, default As T = Nothing) As Task(Of T)
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync*
  nameWithType.vb: IObjectStorageHelper.ReadFileAsync(Of T)(String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync(Of T)(System.String, T)
  name.vb: ReadFileAsync(Of T)(String, T)
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
  id: SaveFileAsync``1(System.String,``0)
  parent: Microsoft.Toolkit.Uwp.IObjectStorageHelper
  langs:
  - csharp
  - vb
  name: SaveFileAsync<T>(String, T)
  nameWithType: IObjectStorageHelper.SaveFileAsync<T>(String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: SaveFileAsync
    path: Microsoft.Toolkit.Uwp/Helpers/ObjectStorage/IObjectStorageHelper.cs
    startLine: 99
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nSave object inside file\n"
  example: []
  syntax:
    content: Task<StorageFile> SaveFileAsync<T>(string filePath, T value)
    parameters:
    - id: filePath
      type: System.String
      description: Path to the file that will contain the object
    - id: value
      type: '{T}'
      description: Object to save
    typeParameters:
    - id: T
      description: Type of object saved
    return:
      type: System.Threading.Tasks.Task{Windows.Storage.StorageFile}
      description: Waiting task until completion
    content.vb: Function SaveFileAsync(Of T)(filePath As String, value As T) As Task(Of StorageFile)
  overload: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync*
  nameWithType.vb: IObjectStorageHelper.SaveFileAsync(Of T)(String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync(Of T)(System.String, T)
  name.vb: SaveFileAsync(Of T)(String, T)
references:
- uid: Microsoft.Toolkit.Uwp
  commentId: N:Microsoft.Toolkit.Uwp
  isExternal: false
  name: Microsoft.Toolkit.Uwp
  nameWithType: Microsoft.Toolkit.Uwp
  fullName: Microsoft.Toolkit.Uwp
- uid: System.Object.Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  commentId: M:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  parent: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  definition: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  name: ToSafeString()
  nameWithType: ExtensionMethods.ToSafeString()
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString()
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  commentId: M:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  isExternal: true
  name: ToSafeString(Object)
  nameWithType: ExtensionMethods.ToSafeString(Object)
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  commentId: T:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  parent: Microsoft.Toolkit.Uwp.Services.Core
  isExternal: false
  name: ExtensionMethods
  nameWithType: ExtensionMethods
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
- uid: Microsoft.Toolkit.Uwp.Services.Core
  commentId: N:Microsoft.Toolkit.Uwp.Services.Core
  isExternal: false
  name: Microsoft.Toolkit.Uwp.Services.Core
  nameWithType: Microsoft.Toolkit.Uwp.Services.Core
  fullName: Microsoft.Toolkit.Uwp.Services.Core
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists
  isExternal: false
  name: KeyExists
  nameWithType: IObjectStorageHelper.KeyExists
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.KeyExists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read
  isExternal: false
  name: Read
  nameWithType: IObjectStorageHelper.Read
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Read
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save
  isExternal: false
  name: Save
  nameWithType: IObjectStorageHelper.Save
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.Save
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
  commentId: M:Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
  isExternal: true
  name: SaveFileAsync<T>(String, T)
  nameWithType: IObjectStorageHelper.SaveFileAsync<T>(String, T)
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync<T>(System.String, T)
  nameWithType.vb: IObjectStorageHelper.SaveFileAsync(Of T)(String, T)
  fullName.vb: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync(Of T)(System.String, T)
  name.vb: SaveFileAsync(Of T)(String, T)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
    name: SaveFileAsync<T>
    nameWithType: IObjectStorageHelper.SaveFileAsync<T>
    fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync``1(System.String,``0)
    name: SaveFileAsync(Of T)
    nameWithType: IObjectStorageHelper.SaveFileAsync(Of T)
    fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,{T}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, T>
  nameWithType: IDictionary<String, T>
  fullName: System.Collections.Generic.IDictionary<System.String, T>
  nameWithType.vb: IDictionary(Of String, T)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, T)
  name.vb: IDictionary(Of String, T)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync
  isExternal: false
  name: FileExistsAsync
  nameWithType: IObjectStorageHelper.FileExistsAsync
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.FileExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync
  isExternal: false
  name: ReadFileAsync
  nameWithType: IObjectStorageHelper.ReadFileAsync
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.ReadFileAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync
  isExternal: false
  name: SaveFileAsync
  nameWithType: IObjectStorageHelper.SaveFileAsync
  fullName: Microsoft.Toolkit.Uwp.IObjectStorageHelper.SaveFileAsync
- uid: System.Threading.Tasks.Task{Windows.Storage.StorageFile}
  commentId: T:System.Threading.Tasks.Task{Windows.Storage.StorageFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StorageFile>
  nameWithType: Task<StorageFile>
  fullName: System.Threading.Tasks.Task<Windows.Storage.StorageFile>
  nameWithType.vb: Task(Of StorageFile)
  fullName.vb: System.Threading.Tasks.Task(Of Windows.Storage.StorageFile)
  name.vb: Task(Of StorageFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Windows.Storage.StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: Windows.Storage.StorageFile
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Windows.Storage.StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: Windows.Storage.StorageFile
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
