### YamlMime:ManagedReference
items:
- uid: Microsoft.Toolkit.Uwp.UI.FileCache
  commentId: T:Microsoft.Toolkit.Uwp.UI.FileCache
  id: FileCache
  parent: Microsoft.Toolkit.Uwp.UI
  children:
  - Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  - Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  - Microsoft.Toolkit.Uwp.UI.FileCache.Instance
  langs:
  - csharp
  - vb
  name: FileCache
  nameWithType: FileCache
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache
  type: Class
  source:
    remote:
      path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: FileCache
    path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
    startLine: 22
  assemblies:
  - Microsoft.Toolkit.Uwp.UI
  namespace: Microsoft.Toolkit.Uwp.UI
  summary: "\nProvides methods and tools to cache files in a folder\n"
  example: []
  syntax:
    content: 'public class FileCache : CacheBase<StorageFile>'
    content.vb: >-
      Public Class FileCache

          Inherits CacheBase(Of StorageFile)
  inheritance:
  - System.Object
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  inheritedMembers:
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaintainContext
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.CacheDuration
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RetryCount
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaxMemoryCacheCount
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.HttpClient
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync(TimeSpan)
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveExpiredAsync(System.Nullable{TimeSpan})
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveAsync(IEnumerable{Uri})
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFileFromCacheAsync(Uri)
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromMemoryCache(Uri)
  - Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  extensionMethods:
  - System.Object.Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Toolkit.Uwp.UI.FileCache.Instance
  commentId: P:Microsoft.Toolkit.Uwp.UI.FileCache.Instance
  id: Instance
  parent: Microsoft.Toolkit.Uwp.UI.FileCache
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: FileCache.Instance
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache.Instance
  type: Property
  source:
    remote:
      path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Instance
    path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
    startLine: 32
  assemblies:
  - Microsoft.Toolkit.Uwp.UI
  namespace: Microsoft.Toolkit.Uwp.UI
  summary: "\nGets public singleton property.\n"
  example: []
  syntax:
    content: public static FileCache Instance { get; }
    parameters: []
    return:
      type: Microsoft.Toolkit.Uwp.UI.FileCache
    content.vb: Public Shared ReadOnly Property Instance As FileCache
  overload: Microsoft.Toolkit.Uwp.UI.FileCache.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  id: InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Toolkit.Uwp.UI.FileCache
  langs:
  - csharp
  - vb
  name: InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  nameWithType: FileCache.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: InitializeTypeAsync
    path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
    startLine: 40
  assemblies:
  - Microsoft.Toolkit.Uwp.UI
  namespace: Microsoft.Toolkit.Uwp.UI
  summary: "\nCache specific hooks to process items from HTTP response\n"
  example: []
  syntax:
    content: protected override Task<StorageFile> InitializeTypeAsync(IRandomAccessStream stream, List<KeyValuePair<string, object>> initializerKeyValues = null)
    parameters:
    - id: stream
      type: IRandomAccessStream
      description: input stream
    - id: initializerKeyValues
      type: List{KeyValuePair{System.String,System.Object}}
      description: key value pairs used when initializing instance of generic type
    return:
      type: Task{StorageFile}
      description: awaitable task
    content.vb: Protected Overrides Function InitializeTypeAsync(stream As IRandomAccessStream, initializerKeyValues As List(Of KeyValuePair(Of String, Object)) = Nothing) As Task(Of StorageFile)
  overridden: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  overload: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync*
  nameWithType.vb: FileCache.InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
- uid: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  id: InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Toolkit.Uwp.UI.FileCache
  langs:
  - csharp
  - vb
  name: InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  nameWithType: FileCache.InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(StorageFile, List<KeyValuePair<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: InitializeTypeAsync
    path: Microsoft.Toolkit.Uwp.UI/Cache/FileCache.cs
    startLine: 52
  assemblies:
  - Microsoft.Toolkit.Uwp.UI
  namespace: Microsoft.Toolkit.Uwp.UI
  summary: "\nCache specific hooks to process items from HTTP response\n"
  example: []
  syntax:
    content: protected override Task<StorageFile> InitializeTypeAsync(StorageFile baseFile, List<KeyValuePair<string, object>> initializerKeyValues = null)
    parameters:
    - id: baseFile
      type: StorageFile
      description: storage file
    - id: initializerKeyValues
      type: List{KeyValuePair{System.String,System.Object}}
      description: key value pairs used when initializing instance of generic type
    return:
      type: Task{StorageFile}
      description: awaitable task
    content.vb: Protected Overrides Function InitializeTypeAsync(baseFile As StorageFile, initializerKeyValues As List(Of KeyValuePair(Of String, Object)) = Nothing) As Task(Of StorageFile)
  overridden: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  overload: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync*
  nameWithType.vb: FileCache.InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
references:
- uid: Microsoft.Toolkit.Uwp.UI
  commentId: N:Microsoft.Toolkit.Uwp.UI
  isExternal: false
  name: Microsoft.Toolkit.Uwp.UI
  nameWithType: Microsoft.Toolkit.Uwp.UI
  fullName: Microsoft.Toolkit.Uwp.UI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  commentId: T:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  parent: Microsoft.Toolkit.Uwp.UI
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1
  name: CacheBase<StorageFile>
  nameWithType: CacheBase<StorageFile>
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>
  nameWithType.vb: CacheBase(Of StorageFile)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile)
  name.vb: CacheBase(Of StorageFile)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1
    name: CacheBase
    nameWithType: CacheBase
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1
    name: CacheBase
    nameWithType: CacheBase
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaintainContext
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaintainContext
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaintainContext
  name: MaintainContext
  nameWithType: CacheBase<StorageFile>.MaintainContext
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.MaintainContext
  nameWithType.vb: CacheBase(Of StorageFile).MaintainContext
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).MaintainContext
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.CacheDuration
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.CacheDuration
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.CacheDuration
  name: CacheDuration
  nameWithType: CacheBase<StorageFile>.CacheDuration
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.CacheDuration
  nameWithType.vb: CacheBase(Of StorageFile).CacheDuration
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).CacheDuration
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RetryCount
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RetryCount
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RetryCount
  name: RetryCount
  nameWithType: CacheBase<StorageFile>.RetryCount
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.RetryCount
  nameWithType.vb: CacheBase(Of StorageFile).RetryCount
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).RetryCount
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaxMemoryCacheCount
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.MaxMemoryCacheCount
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaxMemoryCacheCount
  name: MaxMemoryCacheCount
  nameWithType: CacheBase<StorageFile>.MaxMemoryCacheCount
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.MaxMemoryCacheCount
  nameWithType.vb: CacheBase(Of StorageFile).MaxMemoryCacheCount
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).MaxMemoryCacheCount
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.HttpClient
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.HttpClient
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.HttpClient
  name: HttpClient
  nameWithType: CacheBase<StorageFile>.HttpClient
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.HttpClient
  nameWithType.vb: CacheBase(Of StorageFile).HttpClient
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).HttpClient
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  name: InitializeAsync(StorageFolder, String, HttpMessageHandler)
  nameWithType: CacheBase<StorageFile>.InitializeAsync(StorageFolder, String, HttpMessageHandler)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeAsync(StorageFolder, System.String, HttpMessageHandler)
  nameWithType.vb: CacheBase(Of StorageFile).InitializeAsync(StorageFolder, String, HttpMessageHandler)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeAsync(StorageFolder, System.String, HttpMessageHandler)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
    name: InitializeAsync
    nameWithType: CacheBase<StorageFile>.InitializeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFolder
    name: StorageFolder
    nameWithType: StorageFolder
    fullName: StorageFolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: HttpMessageHandler
    name: HttpMessageHandler
    nameWithType: HttpMessageHandler
    fullName: HttpMessageHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
    name: InitializeAsync
    nameWithType: CacheBase(Of StorageFile).InitializeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFolder
    name: StorageFolder
    nameWithType: StorageFolder
    fullName: StorageFolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: HttpMessageHandler
    name: HttpMessageHandler
    nameWithType: HttpMessageHandler
    fullName: HttpMessageHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
  name: ClearAsync()
  nameWithType: CacheBase<StorageFile>.ClearAsync()
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.ClearAsync()
  nameWithType.vb: CacheBase(Of StorageFile).ClearAsync()
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).ClearAsync()
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
    name: ClearAsync
    nameWithType: CacheBase<StorageFile>.ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
    name: ClearAsync
    nameWithType: CacheBase(Of StorageFile).ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync(TimeSpan)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.ClearAsync(TimeSpan)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
  name: ClearAsync(TimeSpan)
  nameWithType: CacheBase<StorageFile>.ClearAsync(TimeSpan)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.ClearAsync(TimeSpan)
  nameWithType.vb: CacheBase(Of StorageFile).ClearAsync(TimeSpan)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).ClearAsync(TimeSpan)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
    name: ClearAsync
    nameWithType: CacheBase<StorageFile>.ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
    name: ClearAsync
    nameWithType: CacheBase(Of StorageFile).ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveExpiredAsync(System.Nullable{TimeSpan})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveExpiredAsync(System.Nullable{TimeSpan})
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
  name: RemoveExpiredAsync(Nullable<TimeSpan>)
  nameWithType: CacheBase<StorageFile>.RemoveExpiredAsync(Nullable<TimeSpan>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.RemoveExpiredAsync(System.Nullable<TimeSpan>)
  nameWithType.vb: CacheBase(Of StorageFile).RemoveExpiredAsync(Nullable(Of TimeSpan))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).RemoveExpiredAsync(System.Nullable(Of TimeSpan))
  name.vb: RemoveExpiredAsync(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
    name: RemoveExpiredAsync
    nameWithType: CacheBase<StorageFile>.RemoveExpiredAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.RemoveExpiredAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
    name: RemoveExpiredAsync
    nameWithType: CacheBase(Of StorageFile).RemoveExpiredAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).RemoveExpiredAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveAsync(IEnumerable{Uri})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.RemoveAsync(IEnumerable{Uri})
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
  name: RemoveAsync(IEnumerable<Uri>)
  nameWithType: CacheBase<StorageFile>.RemoveAsync(IEnumerable<Uri>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.RemoveAsync(IEnumerable<Uri>)
  nameWithType.vb: CacheBase(Of StorageFile).RemoveAsync(IEnumerable(Of Uri))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).RemoveAsync(IEnumerable(Of Uri))
  name.vb: RemoveAsync(IEnumerable(Of Uri))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
    name: RemoveAsync
    nameWithType: CacheBase<StorageFile>.RemoveAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
    name: RemoveAsync
    nameWithType: CacheBase(Of StorageFile).RemoveAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  name: PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  nameWithType: CacheBase<StorageFile>.PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.PreCacheAsync(Uri, System.Boolean, System.Boolean, CancellationToken)
  nameWithType.vb: CacheBase(Of StorageFile).PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).PreCacheAsync(Uri, System.Boolean, System.Boolean, CancellationToken)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
    name: PreCacheAsync
    nameWithType: CacheBase<StorageFile>.PreCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.PreCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
    name: PreCacheAsync
    nameWithType: CacheBase(Of StorageFile).PreCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).PreCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  name: GetFromCacheAsync(Uri, Boolean, CancellationToken, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<StorageFile>.GetFromCacheAsync(Uri, Boolean, CancellationToken, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFromCacheAsync(Uri, System.Boolean, CancellationToken, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of StorageFile).GetFromCacheAsync(Uri, Boolean, CancellationToken, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFromCacheAsync(Uri, System.Boolean, CancellationToken, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: GetFromCacheAsync(Uri, Boolean, CancellationToken, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
    name: GetFromCacheAsync
    nameWithType: CacheBase<StorageFile>.GetFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
    name: GetFromCacheAsync
    nameWithType: CacheBase(Of StorageFile).GetFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFileFromCacheAsync(Uri)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFileFromCacheAsync(Uri)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
  name: GetFileFromCacheAsync(Uri)
  nameWithType: CacheBase<StorageFile>.GetFileFromCacheAsync(Uri)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFileFromCacheAsync(Uri)
  nameWithType.vb: CacheBase(Of StorageFile).GetFileFromCacheAsync(Uri)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFileFromCacheAsync(Uri)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
    name: GetFileFromCacheAsync
    nameWithType: CacheBase<StorageFile>.GetFileFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFileFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
    name: GetFileFromCacheAsync
    nameWithType: CacheBase(Of StorageFile).GetFileFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFileFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromMemoryCache(Uri)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.GetFromMemoryCache(Uri)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
  name: GetFromMemoryCache(Uri)
  nameWithType: CacheBase<StorageFile>.GetFromMemoryCache(Uri)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFromMemoryCache(Uri)
  nameWithType.vb: CacheBase(Of StorageFile).GetFromMemoryCache(Uri)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFromMemoryCache(Uri)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
    name: GetFromMemoryCache
    nameWithType: CacheBase<StorageFile>.GetFromMemoryCache
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.GetFromMemoryCache
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
    name: GetFromMemoryCache
    nameWithType: CacheBase(Of StorageFile).GetFromMemoryCache
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).GetFromMemoryCache
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  name: IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  nameWithType: CacheBase<StorageFile>.IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.IsFileOutOfDateAsync(StorageFile, TimeSpan, System.Boolean)
  nameWithType.vb: CacheBase(Of StorageFile).IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).IsFileOutOfDateAsync(StorageFile, TimeSpan, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
    name: IsFileOutOfDateAsync
    nameWithType: CacheBase<StorageFile>.IsFileOutOfDateAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.IsFileOutOfDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
    name: IsFileOutOfDateAsync
    nameWithType: CacheBase(Of StorageFile).IsFileOutOfDateAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).IsFileOutOfDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  commentId: M:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  parent: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  definition: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  name: ToSafeString()
  nameWithType: ExtensionMethods.ToSafeString()
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString()
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1
  commentId: T:Microsoft.Toolkit.Uwp.UI.CacheBase`1
  isExternal: false
  name: CacheBase<T>
  nameWithType: CacheBase<T>
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>
  nameWithType.vb: CacheBase(Of T)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T)
  name.vb: CacheBase(Of T)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1
    name: CacheBase
    nameWithType: CacheBase
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1
    name: CacheBase
    nameWithType: CacheBase
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaintainContext
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaintainContext
  isExternal: false
  name: MaintainContext
  nameWithType: CacheBase<T>.MaintainContext
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.MaintainContext
  nameWithType.vb: CacheBase(Of T).MaintainContext
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).MaintainContext
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.CacheDuration
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase`1.CacheDuration
  isExternal: false
  name: CacheDuration
  nameWithType: CacheBase<T>.CacheDuration
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.CacheDuration
  nameWithType.vb: CacheBase(Of T).CacheDuration
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).CacheDuration
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RetryCount
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase`1.RetryCount
  isExternal: false
  name: RetryCount
  nameWithType: CacheBase<T>.RetryCount
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.RetryCount
  nameWithType.vb: CacheBase(Of T).RetryCount
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).RetryCount
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaxMemoryCacheCount
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase`1.MaxMemoryCacheCount
  isExternal: false
  name: MaxMemoryCacheCount
  nameWithType: CacheBase<T>.MaxMemoryCacheCount
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.MaxMemoryCacheCount
  nameWithType.vb: CacheBase(Of T).MaxMemoryCacheCount
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).MaxMemoryCacheCount
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.HttpClient
  commentId: P:Microsoft.Toolkit.Uwp.UI.CacheBase`1.HttpClient
  isExternal: false
  name: HttpClient
  nameWithType: CacheBase<T>.HttpClient
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.HttpClient
  nameWithType.vb: CacheBase(Of T).HttpClient
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).HttpClient
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
  isExternal: true
  name: InitializeAsync(StorageFolder, String, HttpMessageHandler)
  nameWithType: CacheBase<T>.InitializeAsync(StorageFolder, String, HttpMessageHandler)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeAsync(StorageFolder, System.String, HttpMessageHandler)
  nameWithType.vb: CacheBase(Of T).InitializeAsync(StorageFolder, String, HttpMessageHandler)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeAsync(StorageFolder, System.String, HttpMessageHandler)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
    name: InitializeAsync
    nameWithType: CacheBase<T>.InitializeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFolder
    name: StorageFolder
    nameWithType: StorageFolder
    fullName: StorageFolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: HttpMessageHandler
    name: HttpMessageHandler
    nameWithType: HttpMessageHandler
    fullName: HttpMessageHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeAsync(StorageFolder,System.String,HttpMessageHandler)
    name: InitializeAsync
    nameWithType: CacheBase(Of T).InitializeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFolder
    name: StorageFolder
    nameWithType: StorageFolder
    fullName: StorageFolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: HttpMessageHandler
    name: HttpMessageHandler
    nameWithType: HttpMessageHandler
    fullName: HttpMessageHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
  isExternal: false
  name: ClearAsync()
  nameWithType: CacheBase<T>.ClearAsync()
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.ClearAsync()
  nameWithType.vb: CacheBase(Of T).ClearAsync()
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).ClearAsync()
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
    name: ClearAsync
    nameWithType: CacheBase<T>.ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync
    name: ClearAsync
    nameWithType: CacheBase(Of T).ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
  isExternal: true
  name: ClearAsync(TimeSpan)
  nameWithType: CacheBase<T>.ClearAsync(TimeSpan)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.ClearAsync(TimeSpan)
  nameWithType.vb: CacheBase(Of T).ClearAsync(TimeSpan)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).ClearAsync(TimeSpan)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
    name: ClearAsync
    nameWithType: CacheBase<T>.ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.ClearAsync(TimeSpan)
    name: ClearAsync
    nameWithType: CacheBase(Of T).ClearAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
  isExternal: true
  name: RemoveExpiredAsync(Nullable<TimeSpan>)
  nameWithType: CacheBase<T>.RemoveExpiredAsync(Nullable<TimeSpan>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.RemoveExpiredAsync(System.Nullable<TimeSpan>)
  nameWithType.vb: CacheBase(Of T).RemoveExpiredAsync(Nullable(Of TimeSpan))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).RemoveExpiredAsync(System.Nullable(Of TimeSpan))
  name.vb: RemoveExpiredAsync(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
    name: RemoveExpiredAsync
    nameWithType: CacheBase<T>.RemoveExpiredAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.RemoveExpiredAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveExpiredAsync(System.Nullable{TimeSpan})
    name: RemoveExpiredAsync
    nameWithType: CacheBase(Of T).RemoveExpiredAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).RemoveExpiredAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
  isExternal: true
  name: RemoveAsync(IEnumerable<Uri>)
  nameWithType: CacheBase<T>.RemoveAsync(IEnumerable<Uri>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.RemoveAsync(IEnumerable<Uri>)
  nameWithType.vb: CacheBase(Of T).RemoveAsync(IEnumerable(Of Uri))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).RemoveAsync(IEnumerable(Of Uri))
  name.vb: RemoveAsync(IEnumerable(Of Uri))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
    name: RemoveAsync
    nameWithType: CacheBase<T>.RemoveAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.RemoveAsync(IEnumerable{Uri})
    name: RemoveAsync
    nameWithType: CacheBase(Of T).RemoveAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
  isExternal: true
  name: PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  nameWithType: CacheBase<T>.PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.PreCacheAsync(Uri, System.Boolean, System.Boolean, CancellationToken)
  nameWithType.vb: CacheBase(Of T).PreCacheAsync(Uri, Boolean, Boolean, CancellationToken)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).PreCacheAsync(Uri, System.Boolean, System.Boolean, CancellationToken)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
    name: PreCacheAsync
    nameWithType: CacheBase<T>.PreCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.PreCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.PreCacheAsync(Uri,System.Boolean,System.Boolean,CancellationToken)
    name: PreCacheAsync
    nameWithType: CacheBase(Of T).PreCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).PreCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
  isExternal: true
  name: GetFromCacheAsync(Uri, Boolean, CancellationToken, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<T>.GetFromCacheAsync(Uri, Boolean, CancellationToken, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFromCacheAsync(Uri, System.Boolean, CancellationToken, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of T).GetFromCacheAsync(Uri, Boolean, CancellationToken, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFromCacheAsync(Uri, System.Boolean, CancellationToken, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: GetFromCacheAsync(Uri, Boolean, CancellationToken, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
    name: GetFromCacheAsync
    nameWithType: CacheBase<T>.GetFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromCacheAsync(Uri,System.Boolean,CancellationToken,List{KeyValuePair{System.String,System.Object}})
    name: GetFromCacheAsync
    nameWithType: CacheBase(Of T).GetFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
  isExternal: true
  name: GetFileFromCacheAsync(Uri)
  nameWithType: CacheBase<T>.GetFileFromCacheAsync(Uri)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFileFromCacheAsync(Uri)
  nameWithType.vb: CacheBase(Of T).GetFileFromCacheAsync(Uri)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFileFromCacheAsync(Uri)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
    name: GetFileFromCacheAsync
    nameWithType: CacheBase<T>.GetFileFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFileFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFileFromCacheAsync(Uri)
    name: GetFileFromCacheAsync
    nameWithType: CacheBase(Of T).GetFileFromCacheAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFileFromCacheAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
  isExternal: true
  name: GetFromMemoryCache(Uri)
  nameWithType: CacheBase<T>.GetFromMemoryCache(Uri)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFromMemoryCache(Uri)
  nameWithType.vb: CacheBase(Of T).GetFromMemoryCache(Uri)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFromMemoryCache(Uri)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
    name: GetFromMemoryCache
    nameWithType: CacheBase<T>.GetFromMemoryCache
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.GetFromMemoryCache
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.GetFromMemoryCache(Uri)
    name: GetFromMemoryCache
    nameWithType: CacheBase(Of T).GetFromMemoryCache
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).GetFromMemoryCache
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
  isExternal: true
  name: IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  nameWithType: CacheBase<T>.IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.IsFileOutOfDateAsync(StorageFile, TimeSpan, System.Boolean)
  nameWithType.vb: CacheBase(Of T).IsFileOutOfDateAsync(StorageFile, TimeSpan, Boolean)
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).IsFileOutOfDateAsync(StorageFile, TimeSpan, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
    name: IsFileOutOfDateAsync
    nameWithType: CacheBase<T>.IsFileOutOfDateAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.IsFileOutOfDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.IsFileOutOfDateAsync(StorageFile,TimeSpan,System.Boolean)
    name: IsFileOutOfDateAsync
    nameWithType: CacheBase(Of T).IsFileOutOfDateAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).IsFileOutOfDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  commentId: M:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  isExternal: true
  name: ToSafeString(Object)
  nameWithType: ExtensionMethods.ToSafeString(Object)
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString(System.Object)
    name: ToSafeString
    nameWithType: ExtensionMethods.ToSafeString
    fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods.ToSafeString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  commentId: T:Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
  parent: Microsoft.Toolkit.Uwp.Services.Core
  isExternal: false
  name: ExtensionMethods
  nameWithType: ExtensionMethods
  fullName: Microsoft.Toolkit.Uwp.Services.Core.ExtensionMethods
- uid: Microsoft.Toolkit.Uwp.Services.Core
  commentId: N:Microsoft.Toolkit.Uwp.Services.Core
  isExternal: false
  name: Microsoft.Toolkit.Uwp.Services.Core
  nameWithType: Microsoft.Toolkit.Uwp.Services.Core
  fullName: Microsoft.Toolkit.Uwp.Services.Core
- uid: Microsoft.Toolkit.Uwp.UI.FileCache.Instance*
  commentId: Overload:Microsoft.Toolkit.Uwp.UI.FileCache.Instance
  isExternal: false
  name: Instance
  nameWithType: FileCache.Instance
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache.Instance
- uid: Microsoft.Toolkit.Uwp.UI.FileCache
  commentId: T:Microsoft.Toolkit.Uwp.UI.FileCache
  parent: Microsoft.Toolkit.Uwp.UI
  isExternal: false
  name: FileCache
  nameWithType: FileCache
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  name: InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<StorageFile>.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of StorageFile).InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase<StorageFile>.InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: IRandomAccessStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase(Of StorageFile).InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: IRandomAccessStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync*
  commentId: Overload:Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync
  isExternal: false
  name: InitializeTypeAsync
  nameWithType: FileCache.InitializeTypeAsync
  fullName: Microsoft.Toolkit.Uwp.UI.FileCache.InitializeTypeAsync
- uid: IRandomAccessStream
  isExternal: true
  name: IRandomAccessStream
  nameWithType: IRandomAccessStream
  fullName: IRandomAccessStream
- uid: List{KeyValuePair{System.String,System.Object}}
  commentId: '!:List{KeyValuePair{System.String,System.Object}}'
  definition: List`1
  name: List<KeyValuePair<String, Object>>
  nameWithType: List<KeyValuePair<String, Object>>
  fullName: List<KeyValuePair<System.String, System.Object>>
  nameWithType.vb: List(Of KeyValuePair(Of String, Object))
  fullName.vb: List(Of KeyValuePair(Of System.String, System.Object))
  name.vb: List(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{StorageFile}
  commentId: '!:Task{StorageFile}'
  definition: Task`1
  name: Task<StorageFile>
  nameWithType: Task<StorageFile>
  fullName: Task<StorageFile>
  nameWithType.vb: Task(Of StorageFile)
  fullName.vb: Task(Of StorageFile)
  name.vb: Task(Of StorageFile)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
  isExternal: true
  name: InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<T>.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeTypeAsync(IRandomAccessStream, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of T).InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(IRandomAccessStream, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase<T>.InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: IRandomAccessStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(IRandomAccessStream,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase(Of T).InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRandomAccessStream
    name: IRandomAccessStream
    nameWithType: IRandomAccessStream
    fullName: IRandomAccessStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Toolkit.Uwp.UI.CacheBase{StorageFile}
  definition: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  name: InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<StorageFile>.InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeTypeAsync(StorageFile, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of StorageFile).InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase<StorageFile>.InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<StorageFile>.InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase(Of StorageFile).InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of StorageFile).InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: StorageFile
  isExternal: true
  name: StorageFile
  nameWithType: StorageFile
  fullName: StorageFile
- uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
  isExternal: true
  name: InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  nameWithType: CacheBase<T>.InitializeTypeAsync(StorageFile, List<KeyValuePair<String, Object>>)
  fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeTypeAsync(StorageFile, List<KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CacheBase(Of T).InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
  fullName.vb: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: InitializeTypeAsync(StorageFile, List(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase<T>.InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase<T>.InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Toolkit.Uwp.UI.CacheBase`1.InitializeTypeAsync(StorageFile,List{KeyValuePair{System.String,System.Object}})
    name: InitializeTypeAsync
    nameWithType: CacheBase(Of T).InitializeTypeAsync
    fullName: Microsoft.Toolkit.Uwp.UI.CacheBase(Of T).InitializeTypeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: StorageFile
    name: StorageFile
    nameWithType: StorageFile
    fullName: StorageFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
