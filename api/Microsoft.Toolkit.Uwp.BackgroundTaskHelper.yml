### YamlMime:ManagedReference
items:
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  commentId: T:Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  id: BackgroundTaskHelper
  parent: Microsoft.Toolkit.Uwp
  children:
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.String)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.Type)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.String)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.Type)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.Type,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.String,System.Boolean)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.Type,System.Boolean)
  - Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(Windows.ApplicationModel.Background.IBackgroundTaskRegistration,System.Boolean)
  langs:
  - csharp
  - vb
  name: BackgroundTaskHelper
  nameWithType: BackgroundTaskHelper
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  type: Class
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: BackgroundTaskHelper
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 21
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nThis class provides static helper methods for background task.\n"
  example: []
  syntax:
    content: public static class BackgroundTaskHelper
    content.vb: Public Module BackgroundTaskHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.String)
  id: IsBackgroundTaskRegistered(System.String)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: IsBackgroundTaskRegistered(String)
  nameWithType: BackgroundTaskHelper.IsBackgroundTaskRegistered(String)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsBackgroundTaskRegistered
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 28
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nCheck if a background task is registered.\n"
  example: []
  syntax:
    content: public static bool IsBackgroundTaskRegistered(string backgroundTaskName)
    parameters:
    - id: backgroundTaskName
      type: System.String
      description: The name of the background task class
    return:
      type: System.Boolean
      description: True/False indicating if a background task was registered or not
    content.vb: Public Shared Function IsBackgroundTaskRegistered(backgroundTaskName As String) As Boolean
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.Type)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.Type)
  id: IsBackgroundTaskRegistered(System.Type)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: IsBackgroundTaskRegistered(Type)
  nameWithType: BackgroundTaskHelper.IsBackgroundTaskRegistered(Type)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered(System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: IsBackgroundTaskRegistered
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 38
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nCheck if a background task is registered.\n"
  example: []
  syntax:
    content: public static bool IsBackgroundTaskRegistered(Type backgroundTaskType)
    parameters:
    - id: backgroundTaskType
      type: System.Type
      description: The type of the background task. This class has to implement IBackgroundTask
    return:
      type: System.Boolean
      description: True/False indicating if a background task was registered or not
    content.vb: Public Shared Function IsBackgroundTaskRegistered(backgroundTaskType As Type) As Boolean
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  id: Register(System.String,System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Register(String, String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  nameWithType: BackgroundTaskHelper.Register(String, String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String, System.String, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition[])
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Register
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 55
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRegister a background task with conditions.\nIf the task is already registered, return null.\nOr set <code data-dev-comment-type=\"paramref\">forceRegister</code> to true to un-register the old one and then re-register.\n"
  example: []
  syntax:
    content: public static BackgroundTaskRegistration Register(string backgroundTaskName, string backgroundTaskEntryPoint, IBackgroundTrigger trigger, bool forceRegister = false, bool enforceConditions = true, params IBackgroundCondition[] conditions)
    parameters:
    - id: backgroundTaskName
      type: System.String
      description: Name of the background task class
    - id: backgroundTaskEntryPoint
      type: System.String
      description: Entry point of the background task.
    - id: trigger
      type: Windows.ApplicationModel.Background.IBackgroundTrigger
      description: Trigger that indicate when the background task should be invoked
    - id: forceRegister
      type: System.Boolean
      description: Indicate if the background task will be force installed in the case of being already registered
    - id: enforceConditions
      type: System.Boolean
      description: Indicate if the background task should quit if condition is no longer valid
    - id: conditions
      type: Windows.ApplicationModel.Background.IBackgroundCondition[]
      description: Optional conditions for the background task to run with
    return:
      type: Windows.ApplicationModel.Background.BackgroundTaskRegistration
      description: Background Task that was registered with the system
    content.vb: Public Shared Function Register(backgroundTaskName As String, backgroundTaskEntryPoint As String, trigger As IBackgroundTrigger, forceRegister As Boolean = False, enforceConditions As Boolean = True, ParamArray conditions As IBackgroundCondition()) As BackgroundTaskRegistration
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register*
  nameWithType.vb: BackgroundTaskHelper.Register(String, String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String, System.String, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition())
  name.vb: Register(String, String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.Type,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.Type,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  id: Register(System.Type,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Register(Type, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  nameWithType: BackgroundTaskHelper.Register(Type, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.Type, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition[])
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Register
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 107
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nRegister a background task with conditions.\nIf the task is already registered and has the same trigger, returns the existing registration if it has the same trigger.\nIf the task is already registered but has different trigger, return null by default.\nOr set <code data-dev-comment-type=\"paramref\">forceRegister</code> to true to un-register the old one and then re-register.\n"
  example: []
  syntax:
    content: public static BackgroundTaskRegistration Register(Type backgroundTaskType, IBackgroundTrigger trigger, bool forceRegister = false, bool enforceConditions = true, params IBackgroundCondition[] conditions)
    parameters:
    - id: backgroundTaskType
      type: System.Type
      description: The type of the background task. This class has to implement IBackgroundTask
    - id: trigger
      type: Windows.ApplicationModel.Background.IBackgroundTrigger
      description: Trigger that indicate when the background task should be invoked
    - id: forceRegister
      type: System.Boolean
      description: Indicate if the background task will be force installed in the case of being already registered
    - id: enforceConditions
      type: System.Boolean
      description: Indicate if the background task should quit if condition is no longer valid
    - id: conditions
      type: Windows.ApplicationModel.Background.IBackgroundCondition[]
      description: Optional conditions for the background task to run with
    return:
      type: Windows.ApplicationModel.Background.BackgroundTaskRegistration
      description: Background Task that was registered with the system
    content.vb: Public Shared Function Register(backgroundTaskType As Type, trigger As IBackgroundTrigger, forceRegister As Boolean = False, enforceConditions As Boolean = True, ParamArray conditions As IBackgroundCondition()) As BackgroundTaskRegistration
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register*
  nameWithType.vb: BackgroundTaskHelper.Register(Type, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.Type, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition())
  name.vb: Register(Type, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  id: Register(System.String,Windows.ApplicationModel.Background.IBackgroundTrigger,System.Boolean,System.Boolean,Windows.ApplicationModel.Background.IBackgroundCondition[])
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Register(String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  nameWithType: BackgroundTaskHelper.Register(String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition[])
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition[])
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Register
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 125
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nThis registers under the Single Process Model. WARNING: Single Process Model only works with Windows 10 Anniversary Update (14393) and later.\nRegister a background task with conditions.\nIf the task is already registered and has the same trigger, returns the existing registration if it has the same trigger.\nIf the task is already registered but has different trigger, return null by default.\nOr set <code data-dev-comment-type=\"paramref\">forceRegister</code> to true to un-register the old one and then re-register.\n"
  example: []
  syntax:
    content: public static BackgroundTaskRegistration Register(string backgroundTaskName, IBackgroundTrigger trigger, bool forceRegister = false, bool enforceConditions = true, params IBackgroundCondition[] conditions)
    parameters:
    - id: backgroundTaskName
      type: System.String
      description: The name of the background task class
    - id: trigger
      type: Windows.ApplicationModel.Background.IBackgroundTrigger
      description: Trigger that indicate when the background task should be invoked
    - id: forceRegister
      type: System.Boolean
      description: Indicate if the background task will be force installed in the case of being already registered
    - id: enforceConditions
      type: System.Boolean
      description: Indicate if the background task should quit if condition is no longer valid
    - id: conditions
      type: Windows.ApplicationModel.Background.IBackgroundCondition[]
      description: Optional conditions for the background task to run with
    return:
      type: Windows.ApplicationModel.Background.BackgroundTaskRegistration
      description: Background Task that was registered with the system
    content.vb: Public Shared Function Register(backgroundTaskName As String, trigger As IBackgroundTrigger, forceRegister As Boolean = False, enforceConditions As Boolean = True, ParamArray conditions As IBackgroundCondition()) As BackgroundTaskRegistration
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register*
  nameWithType.vb: BackgroundTaskHelper.Register(String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register(System.String, Windows.ApplicationModel.Background.IBackgroundTrigger, System.Boolean, System.Boolean, Windows.ApplicationModel.Background.IBackgroundCondition())
  name.vb: Register(String, IBackgroundTrigger, Boolean, Boolean, IBackgroundCondition())
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.Type,System.Boolean)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.Type,System.Boolean)
  id: Unregister(System.Type,System.Boolean)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Unregister(Type, Boolean)
  nameWithType: BackgroundTaskHelper.Unregister(Type, Boolean)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Unregister
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 135
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nUnregister a background task\n"
  example: []
  syntax:
    content: public static void Unregister(Type backgroundTaskType, bool forceExit = true)
    parameters:
    - id: backgroundTaskType
      type: System.Type
      description: The type of the background task
    - id: forceExit
      type: System.Boolean
      description: Force the background task to quit if it is currently running (at the time of unregistering). Default value is true.
    content.vb: Public Shared Sub Unregister(backgroundTaskType As Type, forceExit As Boolean = True)
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.String,System.Boolean)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.String,System.Boolean)
  id: Unregister(System.String,System.Boolean)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Unregister(String, Boolean)
  nameWithType: BackgroundTaskHelper.Unregister(String, Boolean)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Unregister
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 145
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nUnregister a background task\n"
  example: []
  syntax:
    content: public static void Unregister(string backgroundTaskName, bool forceExit = true)
    parameters:
    - id: backgroundTaskName
      type: System.String
      description: The name of the background task class
    - id: forceExit
      type: System.Boolean
      description: Force the background task to quit if it is currently running (at the time of unregistering). Default value is true.
    content.vb: Public Shared Sub Unregister(backgroundTaskName As String, forceExit As Boolean = True)
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(Windows.ApplicationModel.Background.IBackgroundTaskRegistration,System.Boolean)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(Windows.ApplicationModel.Background.IBackgroundTaskRegistration,System.Boolean)
  id: Unregister(Windows.ApplicationModel.Background.IBackgroundTaskRegistration,System.Boolean)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: Unregister(IBackgroundTaskRegistration, Boolean)
  nameWithType: BackgroundTaskHelper.Unregister(IBackgroundTaskRegistration, Boolean)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister(Windows.ApplicationModel.Background.IBackgroundTaskRegistration, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: Unregister
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 155
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nUnregister a background task\n"
  example: []
  syntax:
    content: public static void Unregister(IBackgroundTaskRegistration backgroundTask, bool forceExit = true)
    parameters:
    - id: backgroundTask
      type: Windows.ApplicationModel.Background.IBackgroundTaskRegistration
      description: A background task that was previously registered with the system
    - id: forceExit
      type: System.Boolean
      description: Force the background task to quit if it is currently running (at the time of unregistering). Default value is true.
    content.vb: Public Shared Sub Unregister(backgroundTask As IBackgroundTaskRegistration, forceExit As Boolean = True)
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.Type)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.Type)
  id: GetBackgroundTask(System.Type)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: GetBackgroundTask(Type)
  nameWithType: BackgroundTaskHelper.GetBackgroundTask(Type)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetBackgroundTask
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 165
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nGet the registered background task of the given type.\n"
  example: []
  syntax:
    content: public static IBackgroundTaskRegistration GetBackgroundTask(Type backgroundTaskType)
    parameters:
    - id: backgroundTaskType
      type: System.Type
      description: Type of the background task class. This class has to implement IBackgroundTask
    return:
      type: Windows.ApplicationModel.Background.IBackgroundTaskRegistration
      description: Background task if there is such background task registered. Otherwise, null
    content.vb: Public Shared Function GetBackgroundTask(backgroundTaskType As Type) As IBackgroundTaskRegistration
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.String)
  commentId: M:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.String)
  id: GetBackgroundTask(System.String)
  parent: Microsoft.Toolkit.Uwp.BackgroundTaskHelper
  langs:
  - csharp
  - vb
  name: GetBackgroundTask(String)
  nameWithType: BackgroundTaskHelper.GetBackgroundTask(String)
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
      branch: docfx
      repo: https://github.com/Microsoft/UWPCommunityToolkit.git
    id: GetBackgroundTask
    path: Microsoft.Toolkit.Uwp/Helpers/BackgroundTaskHelper.cs
    startLine: 175
  assemblies:
  - Microsoft.Toolkit.Uwp
  namespace: Microsoft.Toolkit.Uwp
  summary: "\nGet the registered background task of the given type.\n"
  example: []
  syntax:
    content: public static IBackgroundTaskRegistration GetBackgroundTask(string backgroundTaskName)
    parameters:
    - id: backgroundTaskName
      type: System.String
      description: Name of the background task class
    return:
      type: Windows.ApplicationModel.Background.IBackgroundTaskRegistration
      description: background task if there is such background task registered. Otherwise, null
    content.vb: Public Shared Function GetBackgroundTask(backgroundTaskName As String) As IBackgroundTaskRegistration
  overload: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Toolkit.Uwp
  commentId: N:Microsoft.Toolkit.Uwp
  isExternal: false
  name: Microsoft.Toolkit.Uwp
  nameWithType: Microsoft.Toolkit.Uwp
  fullName: Microsoft.Toolkit.Uwp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered*
  commentId: Overload:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered
  isExternal: false
  name: IsBackgroundTaskRegistered
  nameWithType: BackgroundTaskHelper.IsBackgroundTaskRegistered
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.IsBackgroundTaskRegistered
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register*
  commentId: Overload:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register
  isExternal: false
  name: Register
  nameWithType: BackgroundTaskHelper.Register
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Register
- uid: Windows.ApplicationModel.Background.IBackgroundTrigger
  commentId: T:Windows.ApplicationModel.Background.IBackgroundTrigger
  parent: Windows.ApplicationModel.Background
  isExternal: true
  name: IBackgroundTrigger
  nameWithType: IBackgroundTrigger
  fullName: Windows.ApplicationModel.Background.IBackgroundTrigger
- uid: Windows.ApplicationModel.Background.IBackgroundCondition[]
  name: IBackgroundCondition[]
  nameWithType: IBackgroundCondition[]
  fullName: Windows.ApplicationModel.Background.IBackgroundCondition[]
  nameWithType.vb: IBackgroundCondition()
  fullName.vb: Windows.ApplicationModel.Background.IBackgroundCondition()
  name.vb: IBackgroundCondition()
  spec.csharp:
  - uid: Windows.ApplicationModel.Background.IBackgroundCondition
    name: IBackgroundCondition
    nameWithType: IBackgroundCondition
    fullName: Windows.ApplicationModel.Background.IBackgroundCondition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Windows.ApplicationModel.Background.IBackgroundCondition
    name: IBackgroundCondition
    nameWithType: IBackgroundCondition
    fullName: Windows.ApplicationModel.Background.IBackgroundCondition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Windows.ApplicationModel.Background.BackgroundTaskRegistration
  commentId: T:Windows.ApplicationModel.Background.BackgroundTaskRegistration
  parent: Windows.ApplicationModel.Background
  isExternal: true
  name: BackgroundTaskRegistration
  nameWithType: BackgroundTaskRegistration
  fullName: Windows.ApplicationModel.Background.BackgroundTaskRegistration
- uid: Windows.ApplicationModel.Background
  commentId: N:Windows.ApplicationModel.Background
  isExternal: false
  name: Windows.ApplicationModel.Background
  nameWithType: Windows.ApplicationModel.Background
  fullName: Windows.ApplicationModel.Background
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister*
  commentId: Overload:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister
  isExternal: false
  name: Unregister
  nameWithType: BackgroundTaskHelper.Unregister
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.Unregister
- uid: Windows.ApplicationModel.Background.IBackgroundTaskRegistration
  commentId: T:Windows.ApplicationModel.Background.IBackgroundTaskRegistration
  parent: Windows.ApplicationModel.Background
  isExternal: true
  name: IBackgroundTaskRegistration
  nameWithType: IBackgroundTaskRegistration
  fullName: Windows.ApplicationModel.Background.IBackgroundTaskRegistration
- uid: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask*
  commentId: Overload:Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask
  isExternal: false
  name: GetBackgroundTask
  nameWithType: BackgroundTaskHelper.GetBackgroundTask
  fullName: Microsoft.Toolkit.Uwp.BackgroundTaskHelper.GetBackgroundTask
